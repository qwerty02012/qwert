#Practical 5
from keras.models import Sequential 
from keras.layers import Dense 
from sklearn.datasets import make_blobs 
from sklearn.preprocessing import MinMaxScaler
X,Y=make_blobs(n_samples=100,centers=2,n_features=2,random_state=1) 
print("valuessX:",X)
print("valuessY:",Y)
scalar=MinMaxScaler() 
scalar.fit(X) 
X=scalar.transform(X) 
print("VAlue:",X)
model=Sequential()
model.add(Dense(4,input_dim=2,activation='relu')) 
model.add(Dense(4,activation='relu')) 
model.add(Dense(1,activation='sigmoid')) 
model.compile(loss='binary_crossentropy',optimizer='adam') 
model.fit(X,Y,epochs=500)
Xnew,Yreal=make_blobs(n_samples=3,centers=2,n_features=2,random_state=1) 
print("valuessX:",Xnew)
print("valuessY:",Yreal)
Xnew=scalar.transform(Xnew) 
Ynew=model.predict(Xnew)
print("valuessX:",Xnew)
print("valuessY:",Ynew)
for i in range(len(Xnew)): 
    print("X=%s,Predicted=%s,Desired=%s"%(Xnew[i],Ynew[i],Yreal[i]))


#Practical 5b
from keras.models import Sequential
from keras.layers import Dense
from sklearn.datasets import make_blobs
from sklearn.preprocessing import MinMaxScaler

X,Y=make_blobs(n_samples=100,centers=2,n_features=2,random_state=1)
scalar=MinMaxScaler()
scalar.fit(X)
X=scalar.transform(X)
model=Sequential()
model.add(Dense(4,input_dim=2,activation='relu'))
model.add(Dense(4,activation='relu'))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer='adam')
model.fit(X,Y,epochs=500)
Xnew,Yreal=make_blobs(n_samples=3,centers=2,n_features=2,random_state=1)
Xnew=scalar.transform(Xnew)
Yclass=model.predict(Xnew).round()
Ynew=model.predict(Xnew)
for i in range(len(Xnew)):
 print("X=%s,Predicted_probability=%s,Predicted_class=%s,Desired=%s"%(Xnew[i],Ynew[i],Yclass[i],Yreal[i]))










#Practical 5c
from keras.models import Sequential
from keras.layers import Dense
from sklearn.datasets import make_regression
from sklearn.preprocessing import MinMaxScaler
X,Y=make_regression(n_samples=3,n_features=2,noise=0.1,random_state=1)
print("valuessX:",X)
print("valuessY:",Y)
scalarX,scalarY=MinMaxScaler(),MinMaxScaler()
scalarX.fit(X)
scalarY.fit(Y.reshape(3,1))
X=scalarX.transform(X)
Y=scalarY.transform(Y.reshape(3,1))
print("VAlue X:",X)
print("VAlue:Y",Y)
model=Sequential()
model.add(Dense(4,input_dim=2,activation='relu'))
model.add(Dense(4,activation='relu'))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='mse',optimizer='adam')
model.fit(X,Y,epochs=1000,verbose=0)
Xnew,a=make_regression(n_samples=3,n_features=2,noise=0.1,random_state=1)
Xnew=scalarX.transform(Xnew)
Ynew=model.predict(Xnew)
for i in range(len(Xnew)):
    print("X=%s,Predicted=%s"%(Xnew[i],Ynew[i]))